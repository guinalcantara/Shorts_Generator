#!/usr/bin/env python3
"""
Shorts Generator - Gerador de Shorts de Lives
Vers√£o simplificada para identificar momentos engra√ßados usando LLM
"""

import argparse
import sys
from pathlib import Path
from typing import Optional

# Adicionar o diret√≥rio pai ao path para imports
sys.path.append(str(Path(__file__).parent.parent))

import os 
from dotenv import load_dotenv

# Carregar vari√°veis do arquivo .env
load_dotenv()

from src.video_ingestion import VideoIngestion
from src.audio_processor import AudioProcessor
from src.moment_identifier import MomentIdentifier
from src.video_editor import VideoEditor
from config.settings import OUTPUT_DIR, DATA_DIR


class ShortsGenerator:
    """Classe principal que orquestra todo o processo de gera√ß√£o de shorts."""
    
    def __init__(self):
        self.video_ingestion = VideoIngestion()
        self.audio_processor = AudioProcessor()
        self.moment_identifier = MomentIdentifier()
        self.video_editor = VideoEditor()
    
    def generate_shorts(self, source: str, create_individual: bool = True, 
                       create_compilation: bool = True) -> list[Path]:
        """
        M√©todo principal para gerar shorts a partir de uma fonte de v√≠deo.
        
        Args:
            source: URL ou caminho para arquivo de v√≠deo
            create_individual: Se deve criar shorts individuais
            create_compilation: Se deve criar short de compila√ß√£o
            
        Returns:
            List[Path]: Lista de caminhos para os shorts criados
        """
        try:
            print("üé¨ Iniciando gera√ß√£o de shorts...")
            print(f"üìπ Fonte: {source}")
            
            # 1. Ingest√£o de v√≠deo
            print("\nüì• Etapa 1: Processando v√≠deo...")
            video_path, video_info = self.video_ingestion.ingest_video(source)
            
            # Verificar dura√ß√£o do v√≠deo
            if video_info['duration'] > 7200:  # 2 horas
                print("‚ö†Ô∏è  Aviso: V√≠deo muito longo. Considere usar um segmento menor.")
            
            # 2. Processamento de √°udio e transcri√ß√£o
            print("\nüéµ Etapa 2: Extraindo √°udio e gerando transcri√ß√£o...")
            segments, transcription_file = self.audio_processor.process_audio(video_path)
            
            if not segments:
                raise Exception("N√£o foi poss√≠vel gerar transcri√ß√£o do √°udio")
            
            # 3. Identifica√ß√£o de momentos engra√ßados
            print("\nü§ñ Etapa 3: Identificando momentos engra√ßados com IA...")
            funny_moments = self.moment_identifier.identify_moments(segments)
            
            if not funny_moments:
                print("‚ùå Nenhum momento engra√ßado foi identificado.")
                return []
            
            # Mostrar momentos encontrados
            print(f"\n‚ú® Encontrados {len(funny_moments)} momentos interessantes:")
            for i, moment in enumerate(funny_moments[:5], 1):
                duration = moment['duration']
                priority = moment['priority']
                print(f"  {i}. {moment['title']} ({duration:.1f}s) - Prioridade: {priority}/10")
            
            # 4. Cria√ß√£o dos shorts
            print("\n‚úÇÔ∏è  Etapa 4: Criando shorts...")
            created_shorts = self.video_editor.create_shorts(
                video_path, funny_moments, create_individual, create_compilation
            )
            
            # Resultados finais
            print(f"\nüéâ Processo conclu√≠do!")
            print(f"üìÅ Shorts criados em: {OUTPUT_DIR}")
            print(f"üìä Total de shorts: {len(created_shorts)}")
            
            for short_path in created_shorts:
                print(f"   - {short_path.name}")
            
            return created_shorts
            
        except Exception as e:
            print(f"\n‚ùå Erro durante o processamento: {str(e)}")
            raise
    
    def cleanup_temp_files(self):
        """Remove arquivos tempor√°rios."""
        try:
            temp_files = [
                DATA_DIR / "downloaded_video.*",
                DATA_DIR / "input_video.*",
                DATA_DIR / "extracted_audio.wav",
            ]
            
            for pattern in temp_files:
                for file_path in DATA_DIR.glob(pattern.name):
                    if file_path.exists():
                        file_path.unlink()
                        print(f"üóëÔ∏è  Removido: {file_path.name}")
                        
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro ao limpar arquivos tempor√°rios: {e}")


def main():
    """Fun√ß√£o principal da aplica√ß√£o."""
    parser = argparse.ArgumentParser(
        description="Gerador de Shorts de Lives - Identifica momentos engra√ßados usando IA"
    )
    
    parser.add_argument(
        "source",
        help="URL do v√≠deo/live ou caminho para arquivo local"
    )
    
    parser.add_argument(
        "--no-individual",
        action="store_true",
        help="N√£o criar shorts individuais"
    )
    
    parser.add_argument(
        "--no-compilation",
        action="store_true",
        help="N√£o criar short de compila√ß√£o"
    )
    
    parser.add_argument(
        "--keep-temp",
        action="store_true",
        help="Manter arquivos tempor√°rios"
    )
    
    parser.add_argument(
        "--output-dir",
        type=str,
        help="Diret√≥rio de sa√≠da personalizado"
    )
    
    args = parser.parse_args()
    
    # Configurar diret√≥rio de sa√≠da personalizado
    if args.output_dir:
        global OUTPUT_DIR
        OUTPUT_DIR = Path(args.output_dir)
        OUTPUT_DIR.mkdir(exist_ok=True)
    
    # Verificar se as chaves de API est√£o configuradas
    from config.settings import OPENAI_API_KEY
    if not OPENAI_API_KEY:
        print("‚ùå Erro: OPENAI_API_KEY n√£o configurada.")
        print("Configure a vari√°vel de ambiente OPENAI_API_KEY antes de executar.")
        sys.exit(1)
    
    # Criar inst√¢ncia do gerador
    generator = ShortsGenerator()
    
    try:
        # Gerar shorts
        created_shorts = generator.generate_shorts(
            source=args.source,
            create_individual=not args.no_individual,
            create_compilation=not args.no_compilation
        )
        
        if created_shorts:
            print(f"\n‚úÖ Sucesso! {len(created_shorts)} shorts criados.")
        else:
            print("\n‚ö†Ô∏è  Nenhum short foi criado.")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Processo interrompido pelo usu√°rio.")
        sys.exit(1)
        
    except Exception as e:
        print(f"\nüí• Erro fatal: {str(e)}")
        sys.exit(1)
        
    finally:
        # Limpar arquivos tempor√°rios
        if not args.keep_temp:
            generator.cleanup_temp_files()


if __name__ == "__main__":
    main()

